/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateIndicatorArgs } from "./CreateIndicatorArgs";
import { UpdateIndicatorArgs } from "./UpdateIndicatorArgs";
import { DeleteIndicatorArgs } from "./DeleteIndicatorArgs";
import { IndicatorCountArgs } from "./IndicatorCountArgs";
import { IndicatorFindManyArgs } from "./IndicatorFindManyArgs";
import { IndicatorFindUniqueArgs } from "./IndicatorFindUniqueArgs";
import { Indicator } from "./Indicator";
import { Answer } from "../../answer/base/Answer";
import { Project } from "../../project/base/Project";
import { IndicatorService } from "../indicator.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Indicator)
export class IndicatorResolverBase {
  constructor(
    protected readonly service: IndicatorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Indicator",
    action: "read",
    possession: "any",
  })
  async _indicatorsMeta(
    @graphql.Args() args: IndicatorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Indicator])
  @nestAccessControl.UseRoles({
    resource: "Indicator",
    action: "read",
    possession: "any",
  })
  async indicators(
    @graphql.Args() args: IndicatorFindManyArgs
  ): Promise<Indicator[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Indicator, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Indicator",
    action: "read",
    possession: "own",
  })
  async indicator(
    @graphql.Args() args: IndicatorFindUniqueArgs
  ): Promise<Indicator | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Indicator)
  @nestAccessControl.UseRoles({
    resource: "Indicator",
    action: "create",
    possession: "any",
  })
  async createIndicator(
    @graphql.Args() args: CreateIndicatorArgs
  ): Promise<Indicator> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        answer: args.data.answer
          ? {
              connect: args.data.answer,
            }
          : undefined,

        projectId: args.data.projectId
          ? {
              connect: args.data.projectId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Indicator)
  @nestAccessControl.UseRoles({
    resource: "Indicator",
    action: "update",
    possession: "any",
  })
  async updateIndicator(
    @graphql.Args() args: UpdateIndicatorArgs
  ): Promise<Indicator | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          answer: args.data.answer
            ? {
                connect: args.data.answer,
              }
            : undefined,

          projectId: args.data.projectId
            ? {
                connect: args.data.projectId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Indicator)
  @nestAccessControl.UseRoles({
    resource: "Indicator",
    action: "delete",
    possession: "any",
  })
  async deleteIndicator(
    @graphql.Args() args: DeleteIndicatorArgs
  ): Promise<Indicator | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Answer, {
    nullable: true,
    name: "answer",
  })
  @nestAccessControl.UseRoles({
    resource: "Answer",
    action: "read",
    possession: "any",
  })
  async resolveFieldAnswer(
    @graphql.Parent() parent: Indicator
  ): Promise<Answer | null> {
    const result = await this.service.getAnswer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "projectId",
  })
  @nestAccessControl.UseRoles({
    resource: "Project",
    action: "read",
    possession: "any",
  })
  async resolveFieldProjectId(
    @graphql.Parent() parent: Indicator
  ): Promise<Project | null> {
    const result = await this.service.getProjectId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
