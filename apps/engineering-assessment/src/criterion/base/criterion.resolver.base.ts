/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateCriterionArgs } from "./CreateCriterionArgs";
import { UpdateCriterionArgs } from "./UpdateCriterionArgs";
import { DeleteCriterionArgs } from "./DeleteCriterionArgs";
import { CriterionCountArgs } from "./CriterionCountArgs";
import { CriterionFindManyArgs } from "./CriterionFindManyArgs";
import { CriterionFindUniqueArgs } from "./CriterionFindUniqueArgs";
import { Criterion } from "./Criterion";
import { Area } from "../../area/base/Area";
import { CriterionService } from "../criterion.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Criterion)
export class CriterionResolverBase {
  constructor(
    protected readonly service: CriterionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Criterion",
    action: "read",
    possession: "any",
  })
  async _criteriaMeta(
    @graphql.Args() args: CriterionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Criterion])
  @nestAccessControl.UseRoles({
    resource: "Criterion",
    action: "read",
    possession: "any",
  })
  async criteria(
    @graphql.Args() args: CriterionFindManyArgs
  ): Promise<Criterion[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Criterion, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Criterion",
    action: "read",
    possession: "own",
  })
  async criterion(
    @graphql.Args() args: CriterionFindUniqueArgs
  ): Promise<Criterion | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Criterion)
  @nestAccessControl.UseRoles({
    resource: "Criterion",
    action: "create",
    possession: "any",
  })
  async createCriterion(
    @graphql.Args() args: CreateCriterionArgs
  ): Promise<Criterion> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        areaId: args.data.areaId
          ? {
              connect: args.data.areaId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Criterion)
  @nestAccessControl.UseRoles({
    resource: "Criterion",
    action: "update",
    possession: "any",
  })
  async updateCriterion(
    @graphql.Args() args: UpdateCriterionArgs
  ): Promise<Criterion | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          areaId: args.data.areaId
            ? {
                connect: args.data.areaId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Criterion)
  @nestAccessControl.UseRoles({
    resource: "Criterion",
    action: "delete",
    possession: "any",
  })
  async deleteCriterion(
    @graphql.Args() args: DeleteCriterionArgs
  ): Promise<Criterion | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Area, {
    nullable: true,
    name: "areaId",
  })
  @nestAccessControl.UseRoles({
    resource: "Area",
    action: "read",
    possession: "any",
  })
  async resolveFieldAreaId(
    @graphql.Parent() parent: Criterion
  ): Promise<Area | null> {
    const result = await this.service.getAreaId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
